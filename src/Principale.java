
import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author MEBA
 */
public class Principale extends javax.swing.JFrame {

    /**
     * Creates new form Principale
     */
    public Principale() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nv = new javax.swing.JTextField();
        ni = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tab = new javax.swing.JTable();
        m_carrées = new javax.swing.JButton();
        m_rectangle = new javax.swing.JButton();
        ACP_nonNormée = new javax.swing.JButton();
        ACP_normée = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("N.Var");

        jLabel2.setText("N.Ind");

        nv.setText("2");
        nv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nvActionPerformed(evt);
            }
        });

        ni.setText("10");
        ni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                niActionPerformed(evt);
            }
        });

        tab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0.5", "0"},
                {"-0.1", "1.2"},
                {"-0.5", "0.5"},
                {"-0.3", "0.1"},
                {"0", "2.5"},
                {"1.6", "-0.7"},
                {"2", "2"},
                {"2.4", "1.2"},
                {"0.5", "3.5"},
                {"2.7", "-0.9"}
            },
            new String [] {
                "V1", "V2"
            }
        ));
        jScrollPane1.setViewportView(tab);

        m_carrées.setText("m.carrées");
        m_carrées.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                m_carréesMouseClicked(evt);
            }
        });
        m_carrées.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_carréesActionPerformed(evt);
            }
        });

        m_rectangle.setText("m.rectangle");
        m_rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_rectangleActionPerformed(evt);
            }
        });

        ACP_nonNormée.setText("ACP non normée");
        ACP_nonNormée.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ACP_nonNorméeActionPerformed(evt);
            }
        });

        ACP_normée.setText("ACP normée");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nv, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ni, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(m_carrées)
                        .addGap(55, 55, 55)
                        .addComponent(m_rectangle)
                        .addGap(44, 44, 44)
                        .addComponent(ACP_nonNormée)
                        .addGap(56, 56, 56)
                        .addComponent(ACP_normée)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(nv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m_carrées)
                    .addComponent(m_rectangle)
                    .addComponent(ACP_nonNormée)
                    .addComponent(ACP_normée))
                .addGap(100, 100, 100))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void niActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_niActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_niActionPerformed

    private void m_carréesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_carréesActionPerformed
        this.hide();
    }//GEN-LAST:event_m_carréesActionPerformed

    private void m_carréesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_m_carréesMouseClicked
        
        try {
            MC m = new MC();
            m.show(); // 
            mcar mca= new mcar();
            mca.sai();
            
            DecimalFormat dtime = new DecimalFormat("#.##"); 
            
            m.mx.setText(String.valueOf(dtime.format(mca.moyx())));
            m.my.setText(String.valueOf(dtime.format((mca.moyy()))));
            m.vx.setText(String.valueOf(dtime.format(mca.varx())));
            m.vy.setText(String.valueOf(dtime.format(mca.vary())));
            m.cv.setText(String.valueOf(dtime.format(mca.cov())));
            m.cc.setText(String.valueOf(dtime.format(mca.co())));
            
           /* double result[] = mca.droit();
            System.out.println("Droite d'ajustement : y=" + result[0] +"x +" + result[1]);
            */
            double result[] = mca.droit();
            m.D.setText("droite d'ajustement : y = "+ String.valueOf(dtime.format(result[0])) + "x+" + String.valueOf(dtime.format(result[1])));




        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, e);
         }
    }//GEN-LAST:event_m_carréesMouseClicked

    private void nvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nvActionPerformed

    private void m_rectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_rectangleActionPerformed
        this.hide();
        MR mr = new MR();
        mr.show();
        mcar mca= new mcar();
        mca.sai();
        mrec mre = new mrec(mca.varx(),mca.vary(),mca.cov());
  
        DecimalFormat dtime = new DecimalFormat("#.##"); 
        mr.L1.setText(String.valueOf("landa 1 = " + dtime.format(mre.X2()) + " | landa 2 = " + dtime.format(mre.X1()) ));
        
        mre.mat(mre.X2());
        mr.U1.setText(String.valueOf("U1 = (" + dtime.format(mre.alpha1()) + ";" + dtime.format(mre.alpha2()) + ")"));
        mr.La1.setText(String.valueOf("D1: y = " + dtime.format(mre.a()) + "x + " + dtime.format(mre.b(mca.moyx(),mca.moyy()))));

        mre.mat(mre.X1());
        mr.U2.setText(String.valueOf("U2 = (" + dtime.format(mre.alpha1()) + ";" + dtime.format(mre.alpha2()) + ")"));
//        mr.U2.setText(String.valueOf("U2 = (" + dtime.format(-mre.alpha2()) + ";" + dtime.format(mre.alpha1()) + ")"));
        mr.La2.setText(String.valueOf("D2: y = " + dtime.format(mre.a()) + "x + " + dtime.format(mre.b(mca.moyx(),mca.moyy()))));
    }//GEN-LAST:event_m_rectangleActionPerformed

    private void ACP_nonNorméeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ACP_nonNorméeActionPerformed
        this.hide();
        ACPN acpn = new ACPN();
        acpn.show();
        mcar mca= new mcar();
        mca.sai();
        mrec mre = new mrec(mca.varx(),mca.vary(),mca.cov());
  
        DecimalFormat dtime = new DecimalFormat("#.##"); 
        mre.mat(mre.X2());
        acpn.U1.setText(String.valueOf("U1 = (" + dtime.format(mre.alpha1()) + ";" + dtime.format(mre.alpha2()) + ")"));
        
//        DecimalFormat dtime = new DecimalFormat("#.##"); 
//        mcar mca = new mcar();
//        mca.sai();
        
        Acp acp = new Acp(Math.sqrt(mca.varx()), Math.sqrt(mca.vary()));
        acp.setMat(mca.getData());
        
        acp.X(Math.sqrt(mca.moyx()), Math.sqrt(mca.moyy()));
        acp.XX(acp.getMat());
        
        // for the U1
//        mrec mre = new mrec(mca.varx(),mca.vary(),mca.cov());
//        mre.mat(mre.X2());
    
        acp.XU(acp.getMat(),mre.alpha1(), mre.alpha2());
//        ACPN acpn = new ACPN();
        acpn.U1.setText(String.valueOf("U1 = (" + dtime.format(mre.alpha1()) + ";" + dtime.format(mre.alpha2()) + ")"));
        DefaultTableModel model = (DefaultTableModel)acpn.X1.getModel();
        for(int i=0; i<10; i++){
            Object O[] = {acp.getMat()[i][0],acp.getMat()[i][1]};
            model.addRow(O);
        }
        
        DefaultTableModel model1 = (DefaultTableModel)acpn.XX.getModel();
        for(int i=0; i<2; i++){
            Object O[] = {acp.getXX()[i][0],acp.getXX()[i][1]};
            model1.addRow(O);
        }
        
        DefaultTableModel model2 = (DefaultTableModel)acpn.XU1.getModel();
        for(int i=0; i<10; i++){
            Object O[] = {acp.getXU()[i][0]};
            model2.addRow(O);
        }

        // for the U2
        mre.mat(mre.X1());
        acp.XU(acp.getMat(),mre.alpha1(), mre.alpha2());
        DefaultTableModel model3 = (DefaultTableModel)acpn.X2.getModel();
        for(int i=0; i<10; i++){
            Object O[] = {acp.getMat()[i][0],acp.getMat()[i][1]};
            model3.addRow(O);
        }
        
        DefaultTableModel model4 = (DefaultTableModel)acpn.XU2.getModel();
        for(int i=0; i<10; i++){
            Object O[] = {acp.getXU()[i][0]};
            model4.addRow(O);
        }
        
        acpn.U2.setText(String.valueOf("U2 = (" + dtime.format(mre.alpha1()) + ";" + dtime.format(mre.alpha2()) + ")"));
        acpn.show();
//       
    }//GEN-LAST:event_ACP_nonNorméeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principale().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ACP_nonNormée;
    private javax.swing.JButton ACP_normée;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton m_carrées;
    private javax.swing.JButton m_rectangle;
    private javax.swing.JTextField ni;
    private javax.swing.JTextField nv;
    public javax.swing.JTable tab;
    // End of variables declaration//GEN-END:variables

    /**** la methode des moindres rectangles ****/
    class mcar{
        int i = Integer.parseInt(ni.getText());
        int v = Integer.parseInt(nv.getText());
        double[][] data = new double[i][v];
        
        void sai(){
            System.out.println("sai");
            for(int ligne=0;ligne<i;ligne++){
                for(int col=0;col<v;col++){
                    //System.out.println("loop");
                    //data[ligne][col] = Double.parseDouble(String.valueOf(tab.getModel().getValueAt(ligne,col)));
                    data[ligne][col] = Double.parseDouble((String) tab.getValueAt(ligne,col));
                }   
            }
        }
        
        public double[][] getData() {
            return data;
        }
        
        double moyx(){
            double s=0;
            double moyx;
            for(int ligne=0;ligne<i;ligne++){
                for(int col=0;col<v;col++){
                    if(col==0){
                        s = s+data[ligne][col];
                    }
                }   
            }
            return  moyx = s/i;
        }
        
          double moyy(){
            double s=0;
            double moyy;
            for(int ligne=0;ligne<i;ligne++){
                for(int col=0;col<v;col++){
                    if(col==1){
                        s = s+data[ligne][col];
                    }
                }   
            }
            return  moyy = s/i;
        }
        
        double varx(){
            double s=0;
            double varx;
            for(int ligne=0;ligne<i;ligne++){
                for(int col=0;col<v;col++){
                    if(col==0){
                        s = s+ Math.pow(data[ligne][col],2);
                    }
                }   
            }
            s = s/i;
            varx = s-moyx();
            return  varx;
        }
        
        double vary(){
            double s=0;
            double vary;
            for(int ligne=0;ligne<i;ligne++){
                for(int col=0;col<v;col++){
                    if(col==1){
                        s = s+ Math.pow(data[ligne][col],2);
                    }
                }   
            }
            s = s/i;
            vary = s-moyy();
            return  vary;
        } 
        
        double cov(){
            double s=1;
            double xiyi=0;
            double cov;
            for(int ligne=0;ligne<i;ligne++){
                for(int col=0;col<v;col++){
                    s = s*data[ligne][col];  
                }
                xiyi = xiyi + s;
                s=1;
            }
            xiyi = xiyi/i;
            cov = xiyi-(moyx()*moyy());
            return  cov;
        }
        
        double co(){
            double rx = Math.sqrt(varx());
            double ry = Math.sqrt(vary());
            double co = cov()/(rx)*(ry);
           
            return  co;
        }
        
        double[] droit(){
            double a = cov()/varx();
            double b = moyy()-a*moyx();
            return new double[] {a,b};
        }
    }
    
        /**** la methode des moindres rectangles ****/
        class mrec{
            double[][] mat = new double[2][2]; 
            int a = 1;
            double b,c,x1,x2;
            double delta;
            
            mrec(double varx,double vary,double cov){
                mat[0][0] = varx;
                mat[1][1] = vary;
                mat[0][1] = cov;
                mat[1][0] = cov;
                System.out.println("mat = " + mat[0][0] + " " + mat[1][1]);

            }
            
            double delB(){
            return -mat[0][0]-mat[1][1];
            } 
            
            double delC(){
            return mat[0][0]*mat[1][1]-Math.pow(mat[0][1],2);
            }
            
            double del(){
            return Math.pow(delB(),2)-4*delC();
            }
            
            double X1(){
            return (-delB()-Math.sqrt(del()))/(2*a);    
            }
            
            double X2(){
            return (-delB()+Math.sqrt(del()))/(2*a);  
            }
            
            public void mat(double X){
                mat[0][0] = mat[0][0]-X;
                mat[1][1] = mat[1][1]-X;
            } 
            
            
            double alpha1(){
                double alph1 = mat [0][0]/mat[0][1];
                return (1/Math.sqrt(1 + Math.pow(alph1,2)));
            }
            
//            double alpha1(){
//                return Math.sqrt(Math.pow(mat[0][1],2)/(Math.pow(mat[0][1],2)+mat[0][0]));
//            }
            
            double alpha2(){
                double alph1 = mat [0][0]/mat[0][1];
                return (-alpha1() * alph1);
            }
            
            double a(){
                return (alpha2()/alpha1());
            }
            double b(double x,double y){
                return y-((alpha2()/alpha1())*x);
            }
//            double b2(double x,double y){
//                return y+(alpha2()/alpha1())*x;
//            }
        }
        
        /**** la methode d'Analyse de composante principale ACP ****/
        class Acp{
            double[][] mat = new double[10][2]; 
            double[][] var_cov = new double[2][2]; 
            double[][] matXU = new double[10][1]; 
            double sx;
            double sy;
            
            Acp(double sx,double sy){
                this.sx = sx;
                this.sy = sy;
            }
            
            public void setMat(double mat [][]) {
              this.mat = mat ;
            }
            
            public double[][] getMat(/*int i,int j*/) {
                return mat;
            }
            
            public double[][] getXX(/*int i,int j*/) {
                return var_cov;
            }
            
            public double[][] getXU(/*int i,int j*/) {
                return matXU;
            }
            
            // calculer la matrice (X = rij - moy(r))/math.sqrt(n);  
            double [][]X(double moyx, double moyy){
                for(int ligne=0;ligne<10;ligne++){
                    for(int col=0;col<2;col++){
                        if(col == 0){
                            mat[ligne][col] = (mat[ligne][col] - moyx)/ Math.sqrt(10);
                        }else if(col == 1){
                            mat[ligne][col] = (mat[ligne][col] - moyy)/ Math.sqrt(10);
                        }
                    }   
                }
                return mat;
            }
            
            // calculer la matrice XX' des var_cov; 
            double [][]XX(double [][] matr){
                double sum = 0;
                for(int k = 0; k < 2; k++){
                    for(int i = 0; i < 2; i++){
                        for(int j = 0; j < 10; j++){
                            if(k == i){
                                sum += matr[j][i] * matr[j][i];  
                            }else{
                                sum += matr[j][k] * matr[j][i];
                            }
                        }
                    var_cov[k][i] = sum;
                    sum = 0;
                    }
                }
                return var_cov;
            }
            
            double [][]XU(double [][] matr, double al1, double al2){
                for(int i=0;i<10;i++){
                    matXU[i][0] = ((matr[i][0] * al1) + (matr[i][1] * al2));
                }
                return matXU;
            }
            
        }
}
